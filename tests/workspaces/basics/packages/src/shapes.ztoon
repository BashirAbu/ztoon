package Shapes;

pub enum ShapeType : i32
{
    UNKNOWN = 0,
    Circle,
    Triangle,
    Rectangle,
}
struct triangle
{
    B: f64;
    H: f64;
}

struct rectangle
{
    L: f64;
    H: f64;
}


union shapeUnion
{
    Circle : circle;
    Rectangle: rectangle;
    Triangle: triangle;
}
pub struct Shape
{
    type : ShapeType;
    ShapeUnion: shapeUnion;

    fn Area(self) -> f64
    {
        switch (self.type)
        {
            case ShapeType::Circle:
            {
                ret self.ShapeUnion.Circle.R * self.ShapeUnion.Circle.R * 3.142;
            }
            case ShapeType::Triangle:
            {
                ret self.ShapeUnion.Triangle.B * self.ShapeUnion.Triangle.H * 0.5;
            }
            case ShapeType::Rectangle:
            {
                ret self.ShapeUnion.Rectangle.L * self.ShapeUnion.Rectangle.H;
            }
            default:
            {
                ret 0.0;
            }
        }
    }
}
