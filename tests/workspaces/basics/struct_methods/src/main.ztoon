
package mainPkg;

fn sqrt(value: f64) -> f64;
fn pow(value: f64, power: f64) -> f64;
fn printf(str: readonly i8*, ...);

fn test()
{
    
}

struct Vector3
{
    x: f64;
    y: f64;
    z: f64;
    fn reference(self*)
    {
        self.x = 6.0;
    }
    fn copy(self)
    {
        self.x = 3.0;    
    }
    
    fn GetLen(self*) -> f64
    {
        ret sqrt(pow(self.x, 2.0) + pow(self.y, 2.0) + pow(self.z, 2.0));
    }
}


fn main() -> i32
{
    test();
    position: Vector3 = {4.0, 3.0, 5.0};
    len: f64 = position.GetLen();
    c1: bool = len as i32 == 7; 
    position.reference();
    c2: bool = position.x == 6.0;
    position.copy();
    c3: bool = position.x == 6.0;

    all : i32 = (c1 && c2 && c3) as i32;
    ret all;
}
