package mainPkg;

fn printf(msg: readonly i8*, ...) -> i32;

fn array_pass_by_value(a: i32[4]) 
{
    a[3] = 99;
    
}

fn array_pass_by_reference(a: i32*)
{
    a[3] = 99;

}


fn main() -> i32
{
    //zero initializer
    arr: i32[4];
    arr = {};
    c1: bool = true;

    for i: i32 = 0; i < 4; i++
    {
        c1 = c1 && arr[i] == 0;
    }
    // initialized array
    arr2: i32[4] = {0, 1, 2, 3};

    c2: bool = true;
    
    for i: i32 = 0; i < 4; i++
    {
        c2 = c2 && arr2[i] == i;
    }
    // array copy
    arr3: i32[4] = arr2;

    c3: bool = true;
    
    for i: i32 = 0; i < 4; i++
    {
        c3 = c3 && arr3[i] == arr2[i];
    }
    // array variable assignment
    arr4: i32[4];
    arr4 = {4, 5, 6, 7};

    c4: bool = true;
    for i: i32 = 0; i < 4; i++
    {
        c4 = c4 && arr4[i] == i + 4;
    }
    // pointer to array type
    arr3PTR: i32[4]* = &arr3;

    arr3 = {5, 6, 7, 8};
    
    c5: bool = true;
    for i: i32 = 0; i < 4; i++
    {
        c5 = c5 && (*arr3PTR)[i] == i + 5;
    }

    
    array_pass_by_value(arr3);
        
    c6: bool = arr3[3] == 8;
    
    array_pass_by_reference(arr3 as i32*);
        
    c7: bool = arr3[3] == 99;

    //empty size expression
    arr5: i32[] = {3,4,6};

    arr6: i32[] = arr3;

    c8: bool = arr6[1] == arr3[1];

    //set array to zero
        
    arr6 = {};

    c9: bool = arr6[0] == 0 && arr6[1] == 0 && arr6[2] == 0 && arr6[3] == 0;
    
    
    printf("c1: %d, c2: %d, c3: %d, c4: %d, c5: %d, c6: %d, c7: %d, c8: %d, c9: %d",
    c1 as i32, c2 as i32, c3 as i32, c4 as i32, c5 as i32, c6 as i32,
    c7 as i32, c8 as i32, c8 as i32);
    ret (c1 && c2 && c3 && c4 && c5 && c6 && c7 && c8 && c9) as i32;
}
