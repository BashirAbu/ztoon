package mainPkg;
import core::core;
import core::containers;
import sdl3;
struct vec2<[T]>
{
    union 
    {
        elements: T[2];
        struct {
            x: T;
            y: T;
        }
    }

    fn create(x: T, y: T) -> vec2<[T]>
    {
        v: vec2<[T]>;
        v.x = x;
        v.y = y;
        ret v;
    }
}

struct block
{
    pos: vec2<[i32]>;
    old_pos: vec2<[i32]>;
    w: i32 = 25;
    h: i32 = 25;
}
enum direction : u32 
{
    UP,
    DOWN,
    LEFT,
    RIGHT
}
struct snake {
    dir: direction = direction::RIGHT;
    pos: vec2<[i32]>;
    old_pos: vec2<[i32]>;
    step: i32 = 25;
    w: i32 = 25;
    h: i32 = 25;

    body_blocks: list<[block]>;

    length: i32 = 1;

    fn clean(self*) {
        self.body_blocks.clean();
        self.pos = {};
        self.old_pos = {};
        self.dir = direction::RIGHT;
        self.length = 0;
    }
    fn draw(self*)
    {
        renderer.set_draw_color(255, 255, 255, 255);
        rect: SDL3::rect<[f32]> = {self.pos.x as f32, self.pos.y as f32,
                                     self.w as f32, self.h as f32};
        renderer.fill_rect(&rect);

        for i: u64 = 0; i < self.body_blocks.size; i++ {
            b: block* = (self.body_blocks.get(i));
            rect: SDL3::rect<[f32]> = {b.pos.x as f32, b.pos.y as f32,
                b.w as f32, b.h as f32};
            renderer.fill_rect(&rect);
        }
    }

    fn move(self*)
    {
        self.old_pos = self.pos;
        for i: u64 = 0; i < self.body_blocks.size; i++ {
            b: block* = (self.body_blocks.get(i));
            b.old_pos = b.pos;
        }
        switch self.dir
        {
            case direction::RIGHT:
            {
                self.pos.x += self.step;
            }
            case direction::LEFT:
            {
                self.pos.x -= self.step;
            }
            case direction::UP:
            {
                self.pos.y -= self.step;
            }
            case direction::DOWN:
            {
                self.pos.y += self.step;
            }
        }


        if self.pos.x > window_width - self.w 
        {
            self.pos.x = 0;
        }
        else if self.pos.x < 0
        {
            self.pos.x = window_width;
        }


        if self.pos.y > window_height - self.h
        {
            self.pos.y = 0;
        }
        else if self.pos.y < 0
        {
            self.pos.y = window_width;
        }

        for i: u64 = 0; i < self.body_blocks.size; i++ {
            b: block* = (self.body_blocks.get(i));
            if i == 0 
            {
                b.pos = self.old_pos;
            }
            else 
            {
                
                ahead: block* = (self.body_blocks.get(i - 1));
                b.pos = ahead.old_pos;
            }   
        }
        if self.pos.x == player_food.pos.x && self.pos.y == player_food.pos.y {
            player_food.spawn();
            
            self.grow();
        }

        for i: u64 = 0; i < self.body_blocks.size; i++ {
            b: block* = (self.body_blocks.get(i));

            if self.pos.x == b.pos.x && self.pos.y == b.pos.y {
                game_over = true;
            }
        }
    }

    fn grow(self*)
    {
        self.length++;
        pos: vec2<[i32]>;
        if self.body_blocks.size != 0 {
            b: block* = (self.body_blocks.get(self.body_blocks.size - 1));
            pos = b.old_pos;
        }
        else {
            pos = self.old_pos;
        }
        new_block: block = {pos,{}, self.w, self.h};
        self.body_blocks.add(new_block);
    }
}
struct food 
{
    pos: vec2<[i32]>;
    w: i32 = 25;
    h: i32 = 25;
    render: bool = true;
    fn spawn(self*) 
    {
        self.pos = {};
        self.w = 25;
        self.h = 25;
        self.render = true;
        self.pos.x = SDL3::rand(window_width / 25) * 25;
        self.pos.y = SDL3::rand(window_height / 25) * 25;
    }

    fn draw(self*) 
    {
        if self.render {
            renderer.set_draw_color(255, 0, 0, 255);
            rect: SDL3::rect<[f32]> = {self.pos.x as f32, self.pos.y as f32,
                                         self.w as f32, self.h as f32};
            renderer.fill_rect(&rect);
        }
    }
}

window_width : readonly i32 = 1000;
window_height : readonly i32 = 1000;

window: SDL3::window*;
renderer: SDL3::renderer*;
player: snake;
player_food: food;

game_over: bool = false;

fn main() -> i32
{
    result: bool = SDL3::init(init_flags::SDL_INIT_EVERYTHING);

    if !result {
        printf("Failed to initialize SDL: %s", SDL3::get_error());
        ret 1;
    }

    if !SDL3::create_window_and_renderer("Ztoon", window_width, window_height, 0 as SDL3::window_flags, &window, &renderer)
    {
        printf("Failed to create window and renderer. Err: %s", SDL3::get_error());
         ret 1;
    }

    done: bool = false;
    player_food.spawn();
    while !done {
        event: SDL3::event;
        while SDL3::poll_event(&event) {
            switch event.type
            {
                case SDL3::event_type::SDL_EVENT_QUIT:
                {
                    done = true;
                }
                case SDL3::event_type::SDL_EVENT_KEY_DOWN:
                {
                    switch event.key.code
                    {
                        case key_code::R:
                        {
                            if(game_over)
                            {
                                game_over = false;
                                player.clean();
                                player_food = {};
                                player_food.spawn();
                            }
                        }
                        case key_code::RIGHT:
                        {
                            if player.dir != direction::LEFT 
                            {
                                player.dir = direction::RIGHT;
                            }
                        }
                        case key_code::LEFT:
                        {
                            if player.dir != direction::RIGHT 
                            {
                                player.dir = direction::LEFT;
                            }
                            
                        }
                        case key_code::UP:
                        {
                            if player.dir != direction::DOWN 
                            {
                                player.dir = direction::UP;
                            }
                        }
                        case key_code::DOWN:
                        {
                            if player.dir != direction::UP 
                            {
                                player.dir = direction::DOWN;
                            }
                        }
                    }
                }
            }
        }

        

        if !game_over {
            renderer.set_draw_color(30, 30, 30, 255);
            renderer.clear();

            renderer.set_draw_color(255, 255, 255, 255);
            renderer.set_draw_scale(3.0, 3.0);
            score_text: i8[25];
            SDL_snprintf(score_text as i8*,25, "Score: %d\0", player.length - 1);
            renderer.debug_text(10.0, 10.0, score_text as i8*);
            renderer.set_draw_scale(1.0, 1.0);
            renderer.set_draw_color(30, 30, 30, 255);

            player.move();
            player.draw();
            player_food.draw();
            renderer.present();
        }
        if game_over {
            renderer.set_draw_color(30, 30, 30, 255);
            renderer.clear();
            renderer.set_draw_color(255, 255, 255, 255);
            renderer.set_draw_scale(3.0, 3.0);
            score_text: i8[25];
            SDL_snprintf(score_text as i8*,25, "Score: %d\0", player.length - 1);
            renderer.debug_text(10.0, 10.0, score_text as i8*);
            renderer.set_draw_color(255, 10, 10, 255);
            renderer.set_draw_scale(10.0, 10.0);

            renderer.debug_text(15.0 , 40.0, "GAME OVER");
            renderer.set_draw_scale(5.0, 5.0);
            renderer.debug_text(45.0 , 100.0, "'R' To Restart" );
            renderer.present();
        }

        SDL3::delay(50);
    }
    printf("done");
    ret 0;
}
